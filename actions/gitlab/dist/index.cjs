(()=>{var __webpack_modules__={654:e=>{class Helper{static displayFormattedMessage(e){const s=e.length+4;const t="-".repeat(s);console.log(`${t}\n| ${e} |\n${t}`)}static displayTriggerScanSuccessMessage(){const e="🚀 A security scan has been triggered for this Pull Request. Stay tuned for updates! 🔍";this.displayFormattedMessage(e);return e}static displayScanSuccessMessage(e){const s=`✅ Security scan completed successfully! View the detailed report [here](${e}).`;this.displayFormattedMessage(s);return s}static displayScanFailureMessage(e){const s=`❌ Security scan failed. Review the report for more details [here](${e}).`;this.displayFormattedMessage(s);return s}static displayScanFinishedMessage(){const e="⚠️ Security scan finished, but the result is unknown.";this.displayFormattedMessage(e);return e}static displayScanResultMessage(e,s){if(e==="success"){return this.displayScanSuccessMessage(s)}else if(e==="failure"){return this.displayScanFailureMessage(s)}else{return this.displayScanFinishedMessage()}}}e.exports=Helper},624:(e,s,t)=>{const r=t(233);class SecurityScan{constructor(e,s){this.apiToken=e;this.dedgeHostUrl=s}async triggerScan(e){try{const s=await r.post(`${this.dedgeHostUrl}/integrations/scan-process`,e,{headers:{"X-API-Key":this.apiToken,"Content-Type":"application/json"}});return s.data.scan_id}catch(e){throw new Error(`Failed to trigger scan: ${e.response.data.error}`)}}async pollScanResults(e){try{while(true){const s=await r.get(`${this.dedgeHostUrl}/integrations/scan-process/${e}`,{headers:{"X-API-Key":this.apiToken}});const t=s.data.status;const a=s.data.result;const o=s.data.report_link;if(t==="finished"){return{result:a,reportLink:o}}await new Promise((e=>setTimeout(e,2e4)))}}catch(e){throw new Error(`Failed to poll scan results: ${e.message}`)}}}e.exports=SecurityScan},233:module=>{module.exports=eval("require")("axios")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var s=__webpack_module_cache__[e];if(s!==undefined){return s.exports}var t=__webpack_module_cache__[e]={exports:{}};var r=true;try{__webpack_modules__[e](t,t.exports,__nccwpck_require__);r=false}finally{if(r)delete __webpack_module_cache__[e]}return t.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};const SecurityScan=__nccwpck_require__(624);const Helper=__nccwpck_require__(654);const axios=__nccwpck_require__(233);async function run(){try{const e=process.env.API_TOKEN;const s=process.env.DEDGE_HOST_URL;const t=process.env.GITLAB_TOKEN;if(!e){throw new Error("API_TOKEN is required")}if(!s){throw new Error("DEDGE_HOST_URL is required")}if(!t){throw new Error("GITLAB_TOKEN is required")}const r=process.env.ASSET_ID;const a=new SecurityScan(e,s);let o={branch:process.env.CI_COMMIT_REF_NAME,commit:process.env.CI_COMMIT_SHA,scm_provider:"gitlab",clone_url:process.env.CI_REPOSITORY_URL,url:process.env.CI_PROJECT_URL,scm_repository_id:parseInt(process.env.CI_PROJECT_ID,10),repository_name:process.env.CI_PROJECT_NAME,asset_id:r};let c;try{c=await a.triggerScan(o);console.log(`Scan ID: ${c}`)}catch(e){console.error(`Failed to trigger scan: ${e.message}`);process.exit(1)}const n=Helper.displayTriggerScanSuccessMessage();if(process.env.CI_MERGE_REQUEST_IID){await postCommentOnMergeRequest(n,t)}try{const{result:e,reportLink:s}=await a.pollScanResults(c);console.log(`Scan status: ${e}`);let r;r=Helper.displayScanResultMessage(e,s);if(process.env.CI_MERGE_REQUEST_IID){await postCommentOnMergeRequest(r,t)}}catch(e){console.error(`Failed to poll scan results: ${e.message}`);process.exit(1)}}catch(e){console.error(`Action failed with error: ${e.message}`);process.exit(1)}}async function postCommentOnMergeRequest(e,s){const t=process.env.CI_PROJECT_ID;const r=process.env.CI_MERGE_REQUEST_IID;try{await axios.post(`https://gitlab.com/api/v4/projects/${t}/merge_requests/${r}/notes`,{body:e},{headers:{"PRIVATE-TOKEN":s,"Content-Type":"application/json"}});console.log("Comment posted on merge request.")}catch(e){console.log(`Failed to post comment on merge request: ${e.message}`)}}run();module.exports=__webpack_exports__})();