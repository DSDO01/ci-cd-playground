(()=>{var __webpack_modules__={654:e=>{class Helper{static displayFormattedMessage(e){const s=e.length+4;const r="-".repeat(s);console.log(`${r}\n| ${e} |\n${r}`)}static displayTriggerScanSuccessMessage(){const e="🚀 A security scan has been triggered for this Pull Request. Stay tuned for updates! 🔍";this.displayFormattedMessage(e);return e}static displayScanSuccessMessage(e){const s=`✅ Security scan completed successfully! View the detailed report [here](${e}).`;this.displayFormattedMessage(s);return s}static displayScanFailureMessage(e){const s=`❌ Security scan failed. Review the report for more details [here](${e}).`;this.displayFormattedMessage(s);return s}static displayScanFinishedMessage(){const e="⚠️ Security scan finished, but the result is unknown.";this.displayFormattedMessage(e);return e}static displayScanResultMessage(e,s){if(e==="success"){return this.displayScanSuccessMessage(s)}else if(e==="failure"){return this.displayScanFailureMessage(s)}else{return this.displayScanFinishedMessage()}}}e.exports=Helper},624:(e,s,r)=>{"use strict";r.r(s);var t=r(233);var a=r.n(t);e=r.hmd(e);class SecurityScan{constructor(e,s){this.apiToken=e;this.dedgeHostUrl=s}async triggerScan(e){try{const s=await a().post(`${this.dedgeHostUrl}/integrations/scan-process`,e,{headers:{"X-API-Key":this.apiToken,"Content-Type":"application/json"}});return s.data.scan_id}catch(e){throw new Error(`Failed to trigger scan: ${e.response.data.error}`)}}async pollScanResults(e){try{while(true){const s=await a().get(`${this.dedgeHostUrl}/integrations/scan-process/${e}`,{headers:{"X-API-Key":this.apiToken}});const r=s.data.status;const t=s.data.result;const o=s.data.report_link;if(r==="finished"){return{result:t,reportLink:o}}await new Promise((e=>setTimeout(e,2e4)))}}catch(e){throw new Error(`Failed to poll scan results: ${e.message}`)}}}e.exports=SecurityScan},233:module=>{module.exports=eval("require")("axios")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var s=__webpack_module_cache__[e];if(s!==undefined){return s.exports}var r=__webpack_module_cache__[e]={id:e,loaded:false,exports:{}};var t=true;try{__webpack_modules__[e](r,r.exports,__nccwpck_require__);t=false}finally{if(t)delete __webpack_module_cache__[e]}r.loaded=true;return r.exports}(()=>{__nccwpck_require__.n=e=>{var s=e&&e.__esModule?()=>e["default"]:()=>e;__nccwpck_require__.d(s,{a:s});return s}})();(()=>{__nccwpck_require__.d=(e,s)=>{for(var r in s){if(__nccwpck_require__.o(s,r)&&!__nccwpck_require__.o(e,r)){Object.defineProperty(e,r,{enumerable:true,get:s[r]})}}}})();(()=>{__nccwpck_require__.hmd=e=>{e=Object.create(e);if(!e.children)e.children=[];Object.defineProperty(e,"exports",{enumerable:true,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}});return e}})();(()=>{__nccwpck_require__.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s)})();(()=>{__nccwpck_require__.r=e=>{if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(e,"__esModule",{value:true})}})();if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};const SecurityScan=__nccwpck_require__(624);const Helper=__nccwpck_require__(654);const axios=__nccwpck_require__(233);async function run(){try{const e=process.env.API_TOKEN;const s=process.env.DEDGE_HOST_URL;const r=process.env.GITLAB_TOKEN;if(!e){throw new Error("API_TOKEN is required")}if(!s){throw new Error("DEDGE_HOST_URL is required")}if(!r){throw new Error("GITLAB_TOKEN is required")}const t=process.env.ASSET_ID;const a=new SecurityScan(e,s);let o={branch:process.env.CI_COMMIT_REF_NAME,commit:process.env.CI_COMMIT_SHA,scm_provider:"gitlab",clone_url:process.env.CI_REPOSITORY_URL,url:process.env.CI_PROJECT_URL,scm_repository_id:parseInt(process.env.CI_PROJECT_ID,10),repository_name:process.env.CI_PROJECT_NAME,asset_id:t};let c;try{c=await a.triggerScan(o);console.log(`Scan ID: ${c}`)}catch(e){console.error(`Failed to trigger scan: ${e.message}`);process.exit(1)}const n=Helper.displayTriggerScanSuccessMessage();if(process.env.CI_MERGE_REQUEST_IID){await postCommentOnMergeRequest(n,r)}try{const{result:e,reportLink:s}=await a.pollScanResults(c);console.log(`Scan status: ${e}`);let t;t=Helper.displayScanResultMessage(e,s);if(process.env.CI_MERGE_REQUEST_IID){await postCommentOnMergeRequest(t,r)}}catch(e){console.error(`Failed to poll scan results: ${e.message}`);process.exit(1)}}catch(e){console.error(`Action failed with error: ${e.message}`);process.exit(1)}}async function postCommentOnMergeRequest(e,s){const r=process.env.CI_PROJECT_ID;const t=process.env.CI_MERGE_REQUEST_IID;try{await axios.post(`https://gitlab.com/api/v4/projects/${r}/merge_requests/${t}/notes`,{body:e},{headers:{"PRIVATE-TOKEN":s,"Content-Type":"application/json"}});console.log("Comment posted on merge request.")}catch(e){console.log(`Failed to post comment on merge request: ${e.message}`)}}run();module.exports=__webpack_exports__})();